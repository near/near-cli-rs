name: release
on:
  push:
    # Enable when testing release infrastructure on a branch.
    # branches:
    # - ci/release-check
    tags:
    - "[0-9]+.[0-9]+.[0-9]+"
    - "[0-9]+.[0-9]+.[0-9]+-*"
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    # env:
      # Set to force version number, e.g., when no tag exists.
      # NEAR_CLI_VERSION: TEST-0.0.0
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      near_cli_version: ${{ env.NEAR_CLI_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.NEAR_CLI_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "NEAR_CLI_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.NEAR_CLI_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEAR_CLI_VERSION }}
          release_name: ${{ env.NEAR_CLI_VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # For some builds, we disable ledger support
      FEATURES_FLAGS: ""
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
      # Build static releases with PCRE2.
      PCRE2_SYS_STATIC: 1
    strategy:
      fail-fast: false
      matrix:
        include:
        - build: linux-x86_64
          os: ubuntu-18.04
          target: x86_64-unknown-linux-gnu
        - build: linux-x86_64-musl
          os: ubuntu-18.04
          target: x86_64-unknown-linux-musl
        - build: linux-aarch64-musl
          os: ubuntu-18.04
          target: aarch64-unknown-linux-musl
        - build: macos-x86_64
          os: macos-latest
          target: x86_64-apple-darwin
        - build: macos-aarch64
          os: macos-latest
          target: aarch64-apple-darwin
        - build: win64-msvc
          os: windows-2019
          target: x86_64-pc-windows-msvc
        - build: win32-msvc
          os: windows-2019
          target: i686-pc-windows-msvc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install Rust
      run: rustup update stable && rustup default stable && rustup target add ${{ matrix.target }}

    - name: Use Cross
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Build cross environment
      shell: bash
      run: |
        if [ -d "./cross/${{ matrix.target }}" ]; then
          docker build --tag "cross:${{ matrix.target }}" "./cross/${{ matrix.target }}"
        fi

    - name: Disable Ledger support for platforms that don't have udev
      if: matrix.target == 'x86_64-unknown-linux-musl' || matrix.target == 'aarch64-unknown-linux-musl'
      run: |
        echo "FEATURES_FLAGS=--no-default-features" >> $GITHUB_ENV

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Build release binary
      run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }} ${{ env.FEATURES_FLAGS }}

    - name: Strip release binary (linux and macos)
      if: matrix.build == 'linux-x86_64' || matrix.build == 'macos-x86_64' || matrix.build == 'macos-aarch64'
      run: strip "${{ env.TARGET_DIR }}/release/near-cli"

    - name: Strip release binary (linux-aarch64)
      if: matrix.build == 'linux-aarch64-musl'
      run: |
        docker run --rm -v \
          "$PWD/target:/target:Z" \
          rustembedded/cross:aarch64-unknown-linux-musl \
          aarch64-linux-musl-strip \
          /target/aarch64-unknown-linux-musl/release/near-cli

    - name: Build archive
      shell: bash
      run: |
        staging="near-cli-${{ needs.create-release.outputs.near_cli_version }}-${{ matrix.target }}"
        mkdir -p "$staging"/"docs"

        cp README.md "$staging/"
        cp -a "docs"/* "$staging/docs/"

        if [ "${{ matrix.os }}" = "windows-2019" ]; then
          cp "${{ env.TARGET_DIR }}/release/near-cli.exe" "$staging/"
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          cp "${{ env.TARGET_DIR }}/release/near-cli" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream
